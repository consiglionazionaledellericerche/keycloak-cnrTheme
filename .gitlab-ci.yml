image: docker:git

services:
  - docker:dind

stages:
  - deploy
  - release

variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dsonar.host.url=$SONAR_HOST_URL"
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Dmaven.repo.local=./.m2/repository -Dnexus.url=$NEXUS_URL -Dnexus.login=$NEXUS_USERNAME -Dnexus.pwd=$NEXUS_PASSWORD -Djava.awt.headless=true --batch-mode --errors --fail-at-end --show-version"

cache:
  paths:
    - ./.m2/repository
  # keep cache across branch
  key: "$CI_PROJECT_PATH"

maven-deploy:
  stage: deploy
  image: maven:alpine
  script: "mvn clean deploy $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/*.jar
  only:
    variables:
      - $CI_COMMIT_MESSAGE !~ /prepare release/ && $CI_COMMIT_MESSAGE !~ /prepare for next development iteration/
    refs:
      - master

release_artifact:
  stage: release
  image: maven:alpine
  script:
    - 'which git || (apk add --update git && rm -rf /var/cache/apk/*)'
    # Add the SSH key stored in GIT_SSH_PRIV_KEY variable to the agent store
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email "marco.spasiano@cnr.it"
    - git config --global user.name "marco.spasiano"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn release:clean release:prepare -DreleaseVersion=$MAVEN_RELEASE_VERSION -Dresume=false -B $MAVEN_CLI_OPTS
    - mvn release:perform -Dresume=false -B $MAVEN_CLI_OPTS
  only:
    variables:
      - $CI_COMMIT_MESSAGE !~ /prepare release/ && $CI_COMMIT_MESSAGE !~ /prepare for next development iteration/
    refs:
      - master
  when: manual
